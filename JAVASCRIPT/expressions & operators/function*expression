function* expression
The function* keyword can be used to define a generator function inside an expression.

Try it

Syntax
function* (param0) {
  statements
}
function* (param0, param1) {
  statements
}
function* (param0, param1, /* … ,*/ paramN) {
  statements
}

function* name(param0) {
  statements
}
function* name(param0, param1) {
  statements
}
function* name(param0, param1, /* … ,*/ paramN) {
  statements
}
Copy to Clipboard
Parameters
name Optional
The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body.

paramN Optional
The name of an argument to be passed to the function. A function can have up to 255 arguments.

statements Optional
The statements which comprise the body of the function.

Description
A function* expression is very similar to and has almost the same syntax as a function* statement. The main difference between a function* expression and a function* statement is the function name, which can be omitted in function* expressions to create anonymous generator functions. See also the chapter about functions for more information.

Examples
Using function*
The following example defines an unnamed generator function and assigns it to x. The function yields the square of its argument:

const x = function* (y) {
  yield y * y;
};
