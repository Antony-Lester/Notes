async function* expression
The async function* keywords can be used to define an asynchronous generator function inside an expression.

Try it

Syntax
async function* (param0) {
  statements
}
async function* (param0, param1) {
  statements
}
async function* (param0, param1, /* … ,*/ paramN) {
  statements
}

async function* name(param0) {
  statements
}
async function* name(param0, param1) {
  statements
}
async function* name(param0, param1, /* … ,*/ paramN) {
  statements
}
Copy to Clipboard
Parameters
name Optional
The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body.

paramN Optional
The name of an argument to be passed to the function. A function can have up to 255 arguments.

statements Optional
The statements which comprise the body of the function.

Description
An async function* expression is very similar to and has almost the same syntax as a async function* statement. The main difference between an async function* expression and an async function* statement is the function name, which can be omitted in async function* expressions to create anonymous asynchronous generator functions. See also the chapter about functions for more information.

Examples
Using async function*
The following example defines an unnamed asynchronous generator function and assigns it to x. The function yields the square of its argument:

const x = async function* (y) {
  yield Promise.resolve(y * y);
};
x(6).next().then((res) => console.log(res.value)); // logs 36
