# Heroku

Heroku is a deployment service that we can use to deploy Node.js applications such as Express.js servers.

[Heroku's guides](https://devcenter.heroku.com/articles/getting-started-with-nodejs) are excellent and will you take through the deployment process, step by step. The ease with which we can deploy an application with Heroku allows us to focus on developing the app itself.

## Accounts

Heroku accounts can have up to 5 apps deployed on their free plan.
Sign up [here](https://www.heroku.com/).
Once you have signed up, head to the [Heroku dev center](https://devcenter.heroku.com/) for all their wonderful guides.

# Hosting a PSQL DB and express server using Heroku

## 1. Install the Heroku CLI

To create and deploy our app we will use the [heroku CLI](https://devcenter.heroku.com/articles/heroku-cli).

First step is to install the CLI, we have several options for this but as we're developing a nodeJS project we'll use `npm`.

With npm:

```bash
$ npm i heroku -g
```

There are alternative install options on macOS:

```bash
brew tap heroku/brew && brew install heroku
```

...or Ubuntu:

```bash
curl https://cli-assets.heroku.com/install.sh | sh
```

## 2. Create a Heroku App

Log into Heroku using their command line interface:

```bash
heroku login
```

Follow the prompted steps to login to the account you created earlier.

Create an app in an active git directory. Doing this in the folder where your server exists is a good start, as this is what you will be hosting.

```bash
heroku create your-app-name
```

Here `your-app-name` should be the name you want to give your application. If you don't specify an app name, you'll get a random one which can sometimes be a bit iffy.

This command will both create an app on Heroku for your account. It will also add a new `remote` to your git repository.
Check this by looking at your git remotes:

```bash
git remote -v
```

## 3. Push Your code up to Heroku

```bash
git push heroku main
```

This will trigger Heroku's build process which is outlined below. There's nothing else we need to do for now.

## 4. Creating a Hosted Database

Next we will create our production database. Go to the heroku site and log in.

- Select your application
- `Configure Add-ons`
- Choose `Heroku Postgres`

The free tier will be adequate for our purposes. This will provide you with a `postgreSQL` pre-created database!

**nb** This can also be done with the cli command

```bash
$ heroku addons:create heroku-postgresql:hobby-dev
```

Check that the database exists. Click `settings` on it, and view the credentials. Keep an eye on the URI. Don't close this yet!

## 5. Seeding the Production Database

Check that your database's url is added to the environment variables on Heroku:

```bash
heroku config:get DATABASE_URL
```

If you are in your app's directory, and the database is correctly linked as an add on to Heroku, it should display a DB URI string that is exactly the same as the one in your credentials.

In your `package.json`, add the following keys to the scripts:

```json
{
  "scripts": {
    "seed:prod": "NODE_ENV=production DATABASE_URL=$(heroku config:get DATABASE_URL) npm run seed"
  }
}
```

This will establish an environment variable called `DATABASE_URL`, and set it to whatever heroku provides as your database's URL. It is essential that you do this as the database URL may change! This deals with a lack of predictability on heroku's end.

At the top of your `connection.js`, assign the value of the NODE_ENV to a variable (you may have already created this variable):

```js
const ENV = process.env.NODE_ENV || 'development';
```

It is important to check that we have either the development/test PGDATABASE variable or the production DATABASE_URL. If both are missing from the `process.env`, then throw an error.

```js
if (!process.env.PGDATABASE && !process.env.DATABASE_URL) {
  throw new Error('PGDATABASE or DATABASE_URL not set');
}
```

Next, add a `config` variable. If the `ENV` is production, this variable should hold a config object, containing the `DATABASE_URL` at the `connectionString` key, along with an additional `ssl.rejectUnauthorized` property set to false. This allows you to connect to the hosted database from your local machine.

```js
const ENV = process.env.NODE_ENV || 'development';
// ...
const config =
  ENV === 'production'
    ? {
        connectionString: process.env.DATABASE_URL,
        ssl: {
          rejectUnauthorized: false,
        },
      }
    : {};

module.exports = new Pool(config);
```

Now, **run the seed prod script** that you added to your `package.json` earlier:

```bash
npm run seed:prod
```

It should check whether you're in production, and if you are, it should connect to the production database. Otherwise it will connect to the test or development database specified in your (`.gitignore`'d) `.env` files.

## 7. Use Heroku's PORT

In `listen.js`, make sure you take the PORT off the environment object if it's provided. This is because heroku will provide a port if in production.

```js
const { PORT = 9090 } = process.env;

app.listen(PORT, (err) => {
  if (err) throw err;
  console.log(`Listening on ${PORT}...`);
  };
);
```

## 8. Add a start script

Make sure your package.json has this as a start script:

```json
"start": "node listen.js",
```

Commit your changes, and push to heroku main.

```bash
git push heroku main
```

## 9. Review Your App

```bash
heroku open
```

Any issues should be debugged with:

```bash
heroku logs --tail
```

If you need to make any changes or additions to your app, test and develop them locally first. Once they are working commit and push to your heroku remote to deploy those changes.

## Heroku build process

Heroku will follow a specific build process when you push changes to this repo:

- the changes will be pulled from the repo
- `npm install` is run
- any development dependencies are "pruned"
- environment variables are set
- `npm start` is run

Because of this, any dependencies you have in your project must be included in your `package.json`.

This is why you must provide the start script to make your server listen:

```json
{
  "scripts": {
    "start": "node listen.js"
  }
}
```

## Environment Variables

Heroku will set two environment variables by default:

`NODE_ENV` -> 'production'
`PORT` -> a number on the heroku servers

We can add additional environment variables to store secrets such as api keys that we might need in our applications. Variables can be set through the Heroku dashboard or using the CLI commands below.

## Useful Heroku CLI Commands

Log in to you account:

```bash
$ heroku login
```

Create a new app on heroku with a _random name_:

```bash
$ heroku create ...
```

Create a new app on heroku with the name `my-app` if it's available:

```bash
$ heroku create my-app
```

Add an environment variable called `KEY` with a value of `VALUE` to your app:

```
$ heroku config:set KEY=VALUE
```

Show all existing environment variables:

```bash
$ heroku config
```

Print the logs of your app to the terminal:

```bash
$ heroku logs
```

Opens a live-feed of the most recent heroku logs in the terminal.

```bash
$ heroku logs --tail
```
